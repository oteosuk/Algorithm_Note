
[배열 한가지 원소로 초기화]

fill_n(arr, 26, -1); => arr배열의 0부터~26번째 인덱스의 공간을 -1로 채움

===================================================================

[적은 갯수 요소중에 최솟값찾기]
<algorithm> 헤더추가후
min({a,b,c,d})

===================================================================

[(1차원,2차원)배열 -  0 또는 특정값으로 초기화]

<fill 이용> (algorithm 사용)

fill(변경하려는 원소의 범위 시작주소, 변경하려는 원소의 범위 종료주소, 변경 값)
fill_n(변경하려는 원소의 범위 시작주소, 변경하려는 원소 갯수, 변경 값)


int baechu[50][50];  이라고 하자.

fill(&baechu[0][0], &baechu[49][49], 2); //명확한 시작주소 표기
(주의! 종료주소를 [50][50]으로 하면 안된다.)
fill(baechu[0], baechu[0] + 2500, 2); // 포인터이용
fill_n(&baechu[0][0], 2500, 2); // 명확한 시작주소 표기
fill_n(baechu[0], 2500, 2); // 포인터이용

=> 백준풀다가 발견한 것 : 이유는 모르겠지만 한가지 방식으로 통일해서 사용하지 않으면 오류가 나서 틀릴때가 있다. 한가지로 통일하도록하자.



<memset 이용> (cstring(string.h) 또는 memory.h 사용)

(주의! memset 은 0, -1 이외에 다른숫자로 초기화 불가능! char형은 가능하다. memset은 1바이트 단위로 값을 초기화하기때문에 4바이트인 1은 표현불가)

(1차원)
memset(baechu, 0, sizeof(int));


(2차원)
for (int i = 0; i < 행의개수(row); i++) {
     memset(baechu[i], 0, sizeof(int) * 열의개수(column));
}

(char형 예시)
char arr1[] = "blockdmask blog";
memset(arr1, 'c', 5 * sizeof(char));
printf(arr1);
=> cccccdmask blog

===================================================================

[fill을 이용해서 배열의 원소개수 계산]

전체 배열의 크기를 첫번재 원소의 값의 크기로 나누어 계산

int arr[5];

int arrnum = sizeof(arr)/sizeof(arr[0]); => 5
int arrnum = sizeof(arr)/sizeof(*arr); => 5

int arr[5][5];

int arrnum = sizeof(arr)/sizeof(arr[0][0]); => 25
int arrnum = sizeof(arr)/sizeof(*arr[0]); => 25

int arrnum =sizeof(arr)/sizeof(*arr); 는 5 {{5개},{5개},{5개},{5개},{5개}} 큰묶음의 개수를 세는것

===================================================================