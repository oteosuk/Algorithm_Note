
[pair 선언]

#include <utility> // 단순히 pair만 쓸꺼면
#include <vector> // vector와 같이 사용할 거라면 vector 안에 포함되어있다.

1.
pair<int, double> p;
p = make_pair(2, 2.5);

2.
vecotr<pair<int, int>> a(n); //크기를 n으로 지정해서 선언
for(int i = 0;i<n;i++){
    cin >> a[i].second >> a[i].first;
}

3. 배열로 선언(비추)
pair<int,int> arr[100001]; (main 함수 밖에)

arr[i] = {a,b};

=========================================================

[vector pair 정렬할때]

sort(p.begin(), p.end());

하면 pair.first 기준 오름차순으로 정렬된다

ex)
1 0 
1 2
2 0 
2 2

bool compare(const pair<int, int>& a, const pair<int, int>& b) {
	return a.second < b.second;
}
sort(p.begin(), p.end(), compare);
=> 이런식으로 하면 second 기준으로 오름차순으로 정리할 수 있다.

=========================================================

[pair 비교]

bool compare(pair<int, int> a, pair<int, int> b)
{
    if (a.second == b.second) {
        return a.first < b.first;
    }
    return a.second > b.second;
}

=========================================================

[pair 큐 주의사항]

pair<int, int> (x,y) = q.front(); 하면 왜인지는 모르겠지만 저장이 되지않는다.

x = q.front().first;
y = q.front().second;
를 하던가

pair<int,int> a = q.front();
x = a.first;
y = a.second;
를 해줘야한다.

=========================================================

[pair<int,int>(x,y) pair{x,y}와 makr_pair(x,y)의 차이]

q.push(pair<int,int>(x,y)) 방법이 있고
q.push(make_pair(x,y)) 방법이 있다.
별차이는 없는것 같다.

다만 == 비교할때

pair<int, int> p;

p = {1, 2}; 일때

p == pair<int, int>(1,2)
p == make_pair(1, 2)

는 되는데

p == pair{1,2}는 c++14버전은 되지않지만 c++17버전은 된다.

1. 프로젝트 -> 속성 -> C/C++ -> 모든 옵션 -> C++ 언어 표준*

여기서 바꾸거나

2. 프로젝트 -> 속성 -> C/C++ -> 명령줄 -> 추가옵션글상자

글상자에 밑에서 원하는 속성을 넣어주면 된다.

/std:c++14

/std:c++17

/std:c++latest

=========================================================